// LaRPC Protocol Buffers
// Copyright 2010 Andrew Reusch

package larpc;

message EncryptionDescriptor {
        optional string cipher = 1;

        // Symmetric Ciphers:
        optional string key = 2;
        optional string iv = 3;
        optional bool is_password_based = 4 [default = false];
        optional string password_digest_algorithm = 5;

        // Asymmetric Ciphers:
        optional string key_hash = 6;
}

message KeygenParameters {
        // Short name (SN) of the NID describing the key type. See <openssl/evp.h>,
        // search for EVP_PKEY_*.
        required string key_type = 1;

        // Number of bits in the key.
        optional uint32 num_bits = 2;
}

message MachineKey {
        required string public_key = 1;
        required string private_key = 2;
}

message Config {
        required string machine_key_file = 1;
        optional EncryptionDescriptor machine_key_encryption = 2;

        required string local_principles_file = 3;

        required string bind_ip = 4;
        required int32 bind_port = 5;

        required string trust_certificate_issuer_cn = 6;
        required int32 trust_certificate_expiration_time_days = 7;
}

message ChannelMessage {
        repeated RPCRequest requests = 1;
        repeated RPCResponse responses = 2;
        optional ChannelControl control = 3;
}

message ChannelSetup {
        required string machine_id = 1;

        // NOTE: Although this uses the same data structure as the configuration stream to describe
        // a Principle, it is expected that only the public fields will be filled.
        repeated PrincipleDescriptor principles = 2;
}

message PrincipleVersionRecord {
        required uint32 version = 1;
        required string hash = 2;
}

message PrincipleDescriptor {
        // Three required fields for each Principle:
        //  - Display name, which is displayed to the user
        //  - Public Key
        //  - Versioning number
        required string display_name = 1;
        required string public_key = 2;
        required uint32 version = 3;

        // List of known authorizing certificates for this principle. Each node that we know is
        // currently authorized to act on behalf of the principle should have given us
        // an X509 cert saying it trusts the principle.

        // If we are authorized to act on behalf of the principle, a trusting
        // X509 cert will be present, issued by our machine private
        repeated string trusting_x509_certificate = 4;

        // -----------------------[ PRIVATE FIELDS ]---------------------------------
        // Fields below this line should not be transmitted to other nodes without
        // stronger security verification. 

        // If we are able to (with aid of decryption) act on behalf of the principle,
        // a private key will be present.
        optional string encrypted_private_key = 6;
        optional EncryptionDescriptor private_key_encryption_descriptor = 7;

        // Version history; tracks updates to Prinicple metadata. All updates to basic
        // metadata information require a signed update announcement. This information
        // is used for conflict resolution and to validate update announcements.
        repeated PrincipleVersionRecord past_versions = 8;
}

message MethodDescriptor {
        optional string method_name = 1;
}

message RPCRequest {
        optional string channel_id = 1;
        optional uint32 request_id = 2;
        
        optional MethodDescriptor method_id = 3;

        optional bytes method_parameters = 4;
}

message RPCResponse {
        optional string channel_id = 1;
        optional uint32 request_id = 2;

        optional bytes response = 3;       
}

message OpenChannelRequest {
        // Public key of the principle that is initiating the channel.
        optional bytes initiator_public_key = 1;

        // Certificate signed by initiator indicating that the initiating
        // machine has authority to initiate some request on behalf
        // of them (further ACLs may apply server-side; this simply
        // serves to regulate the ability of the connection to be
        // open).
        optional bytes initiator_certificate = 2;

        // Principle to which the channel should be opened.
        optional PrincipleDescriptor desired_principle = 3;

        // Initiator-generated portion of the channel id.
        optional string channel_id = 4;
}

message OpenChannelResponse {
        // Channel ID given in the request.
        optional string initiator_channel_id = 1;

        // Channel ID generated by the responding principle.
        optional string responding_channel_id = 2;

        // Certificate signed by the responding principle indicating
        // that the responding machine has authority to initiate some
        // response on behalf of them (further ACLs may apply on the
        // respondent side).
        optional bytes responding_certificate = 3;
}

message ChannelControl {
        repeated OpenChannelRequest open_channel_request = 1;
        repeated OpenChannelResponse open_channel_response = 2;
        repeated string close_channel_id = 3;
}
