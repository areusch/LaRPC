// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_test_5fconfig_2eproto__INCLUDED
#define PROTOBUF_test_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "larpc.pb.h"

namespace larpc {
namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_5fconfig_2eproto();
void protobuf_AssignDesc_test_5fconfig_2eproto();
void protobuf_ShutdownFile_test_5fconfig_2eproto();

class TestConfig;
class NodeConfig;

// ===================================================================

class TestConfig : public ::google::protobuf::Message {
 public:
  TestConfig();
  virtual ~TestConfig();
  
  TestConfig(const TestConfig& from);
  
  inline TestConfig& operator=(const TestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestConfig& default_instance();
  void Swap(TestConfig* other);
  
  // implements Message ----------------------------------------------
  
  TestConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestConfig& from);
  void MergeFrom(const TestConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .larpc.test.NodeConfig nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::larpc::test::NodeConfig >& nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::larpc::test::NodeConfig >* mutable_nodes();
  inline const ::larpc::test::NodeConfig& nodes(int index) const;
  inline ::larpc::test::NodeConfig* mutable_nodes(int index);
  inline ::larpc::test::NodeConfig* add_nodes();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::larpc::test::NodeConfig > nodes_;
  friend void  protobuf_AddDesc_test_5fconfig_2eproto();
  friend void protobuf_AssignDesc_test_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_test_5fconfig_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TestConfig* default_instance_;
};
// -------------------------------------------------------------------

class NodeConfig : public ::google::protobuf::Message {
 public:
  NodeConfig();
  virtual ~NodeConfig();
  
  NodeConfig(const NodeConfig& from);
  
  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConfig& default_instance();
  void Swap(NodeConfig* other);
  
  // implements Message ----------------------------------------------
  
  NodeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeConfig& from);
  void MergeFrom(const NodeConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string machine_key = 1;
  inline bool has_machine_key() const;
  inline void clear_machine_key();
  static const int kMachineKeyFieldNumber = 1;
  inline const ::std::string& machine_key() const;
  inline void set_machine_key(const ::std::string& value);
  inline void set_machine_key(const char* value);
  inline void set_machine_key(const char* value, size_t size);
  inline ::std::string* mutable_machine_key();
  
  // required string machine_private_key = 2;
  inline bool has_machine_private_key() const;
  inline void clear_machine_private_key();
  static const int kMachinePrivateKeyFieldNumber = 2;
  inline const ::std::string& machine_private_key() const;
  inline void set_machine_private_key(const ::std::string& value);
  inline void set_machine_private_key(const char* value);
  inline void set_machine_private_key(const char* value, size_t size);
  inline ::std::string* mutable_machine_private_key();
  
  // repeated .larpc.PrincipleDescriptor principles = 3;
  inline int principles_size() const;
  inline void clear_principles();
  static const int kPrinciplesFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::larpc::PrincipleDescriptor >& principles() const;
  inline ::google::protobuf::RepeatedPtrField< ::larpc::PrincipleDescriptor >* mutable_principles();
  inline const ::larpc::PrincipleDescriptor& principles(int index) const;
  inline ::larpc::PrincipleDescriptor* mutable_principles(int index);
  inline ::larpc::PrincipleDescriptor* add_principles();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* machine_key_;
  static const ::std::string _default_machine_key_;
  ::std::string* machine_private_key_;
  static const ::std::string _default_machine_private_key_;
  ::google::protobuf::RepeatedPtrField< ::larpc::PrincipleDescriptor > principles_;
  friend void  protobuf_AddDesc_test_5fconfig_2eproto();
  friend void protobuf_AssignDesc_test_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_test_5fconfig_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodeConfig* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// TestConfig

// repeated .larpc.test.NodeConfig nodes = 1;
inline int TestConfig::nodes_size() const {
  return nodes_.size();
}
inline void TestConfig::clear_nodes() {
  nodes_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::larpc::test::NodeConfig >&
TestConfig::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::larpc::test::NodeConfig >*
TestConfig::mutable_nodes() {
  return &nodes_;
}
inline const ::larpc::test::NodeConfig& TestConfig::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::larpc::test::NodeConfig* TestConfig::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::larpc::test::NodeConfig* TestConfig::add_nodes() {
  return nodes_.Add();
}

// -------------------------------------------------------------------

// NodeConfig

// required string machine_key = 1;
inline bool NodeConfig::has_machine_key() const {
  return _has_bit(0);
}
inline void NodeConfig::clear_machine_key() {
  if (machine_key_ != &_default_machine_key_) {
    machine_key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& NodeConfig::machine_key() const {
  return *machine_key_;
}
inline void NodeConfig::set_machine_key(const ::std::string& value) {
  _set_bit(0);
  if (machine_key_ == &_default_machine_key_) {
    machine_key_ = new ::std::string;
  }
  machine_key_->assign(value);
}
inline void NodeConfig::set_machine_key(const char* value) {
  _set_bit(0);
  if (machine_key_ == &_default_machine_key_) {
    machine_key_ = new ::std::string;
  }
  machine_key_->assign(value);
}
inline void NodeConfig::set_machine_key(const char* value, size_t size) {
  _set_bit(0);
  if (machine_key_ == &_default_machine_key_) {
    machine_key_ = new ::std::string;
  }
  machine_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeConfig::mutable_machine_key() {
  _set_bit(0);
  if (machine_key_ == &_default_machine_key_) {
    machine_key_ = new ::std::string;
  }
  return machine_key_;
}

// required string machine_private_key = 2;
inline bool NodeConfig::has_machine_private_key() const {
  return _has_bit(1);
}
inline void NodeConfig::clear_machine_private_key() {
  if (machine_private_key_ != &_default_machine_private_key_) {
    machine_private_key_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NodeConfig::machine_private_key() const {
  return *machine_private_key_;
}
inline void NodeConfig::set_machine_private_key(const ::std::string& value) {
  _set_bit(1);
  if (machine_private_key_ == &_default_machine_private_key_) {
    machine_private_key_ = new ::std::string;
  }
  machine_private_key_->assign(value);
}
inline void NodeConfig::set_machine_private_key(const char* value) {
  _set_bit(1);
  if (machine_private_key_ == &_default_machine_private_key_) {
    machine_private_key_ = new ::std::string;
  }
  machine_private_key_->assign(value);
}
inline void NodeConfig::set_machine_private_key(const char* value, size_t size) {
  _set_bit(1);
  if (machine_private_key_ == &_default_machine_private_key_) {
    machine_private_key_ = new ::std::string;
  }
  machine_private_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeConfig::mutable_machine_private_key() {
  _set_bit(1);
  if (machine_private_key_ == &_default_machine_private_key_) {
    machine_private_key_ = new ::std::string;
  }
  return machine_private_key_;
}

// repeated .larpc.PrincipleDescriptor principles = 3;
inline int NodeConfig::principles_size() const {
  return principles_.size();
}
inline void NodeConfig::clear_principles() {
  principles_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::larpc::PrincipleDescriptor >&
NodeConfig::principles() const {
  return principles_;
}
inline ::google::protobuf::RepeatedPtrField< ::larpc::PrincipleDescriptor >*
NodeConfig::mutable_principles() {
  return &principles_;
}
inline const ::larpc::PrincipleDescriptor& NodeConfig::principles(int index) const {
  return principles_.Get(index);
}
inline ::larpc::PrincipleDescriptor* NodeConfig::mutable_principles(int index) {
  return principles_.Mutable(index);
}
inline ::larpc::PrincipleDescriptor* NodeConfig::add_principles() {
  return principles_.Add();
}


}  // namespace test
}  // namespace larpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_test_5fconfig_2eproto__INCLUDED
