// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_config.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace larpc {
namespace test {

namespace {

const ::google::protobuf::Descriptor* TestConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_5fconfig_2eproto() {
  protobuf_AddDesc_test_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test_config.proto");
  GOOGLE_CHECK(file != NULL);
  TestConfig_descriptor_ = file->message_type(0);
  static const int TestConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConfig, nodes_),
  };
  TestConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConfig_descriptor_,
      TestConfig::default_instance_,
      TestConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConfig));
  NodeConfig_descriptor_ = file->message_type(1);
  static const int NodeConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, machine_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, machine_private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, principles_),
  };
  NodeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeConfig_descriptor_,
      NodeConfig::default_instance_,
      NodeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConfig_descriptor_, &TestConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeConfig_descriptor_, &NodeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_5fconfig_2eproto() {
  delete TestConfig::default_instance_;
  delete TestConfig_reflection_;
  delete NodeConfig::default_instance_;
  delete NodeConfig_reflection_;
}

void protobuf_AddDesc_test_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::larpc::protobuf_AddDesc_larpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021test_config.proto\022\nlarpc.test\032\013larpc.p"
    "roto\"3\n\nTestConfig\022%\n\005nodes\030\001 \003(\0132\026.larp"
    "c.test.NodeConfig\"n\n\nNodeConfig\022\023\n\013machi"
    "ne_key\030\001 \002(\t\022\033\n\023machine_private_key\030\002 \002("
    "\t\022.\n\nprinciples\030\003 \003(\0132\032.larpc.PrincipleD"
    "escriptor", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_config.proto", &protobuf_RegisterTypes);
  TestConfig::default_instance_ = new TestConfig();
  NodeConfig::default_instance_ = new NodeConfig();
  TestConfig::default_instance_->InitAsDefaultInstance();
  NodeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_5fconfig_2eproto {
  StaticDescriptorInitializer_test_5fconfig_2eproto() {
    protobuf_AddDesc_test_5fconfig_2eproto();
  }
} static_descriptor_initializer_test_5fconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TestConfig::kNodesFieldNumber;
#endif  // !_MSC_VER

TestConfig::TestConfig() {
  SharedCtor();
}

void TestConfig::InitAsDefaultInstance() {
}

TestConfig::TestConfig(const TestConfig& from) {
  SharedCtor();
  MergeFrom(from);
}

void TestConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConfig::~TestConfig() {
  SharedDtor();
}

void TestConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TestConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConfig_descriptor_;
}

const TestConfig& TestConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5fconfig_2eproto();  return *default_instance_;
}

TestConfig* TestConfig::default_instance_ = NULL;

TestConfig* TestConfig::New() const {
  return new TestConfig;
}

void TestConfig::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .larpc.test.NodeConfig nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nodes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_nodes()));
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TestConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .larpc.test.NodeConfig nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .larpc.test.NodeConfig nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConfig::ByteSize() const {
  int total_size = 0;
  
  // repeated .larpc.test.NodeConfig nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TestConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConfig::MergeFrom(const TestConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConfig::CopyFrom(const TestConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void TestConfig::Swap(TestConfig* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConfig_descriptor_;
  metadata.reflection = TestConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string NodeConfig::_default_machine_key_;
const ::std::string NodeConfig::_default_machine_private_key_;
#ifndef _MSC_VER
const int NodeConfig::kMachineKeyFieldNumber;
const int NodeConfig::kMachinePrivateKeyFieldNumber;
const int NodeConfig::kPrinciplesFieldNumber;
#endif  // !_MSC_VER

NodeConfig::NodeConfig() {
  SharedCtor();
}

void NodeConfig::InitAsDefaultInstance() {
}

NodeConfig::NodeConfig(const NodeConfig& from) {
  SharedCtor();
  MergeFrom(from);
}

void NodeConfig::SharedCtor() {
  _cached_size_ = 0;
  machine_key_ = const_cast< ::std::string*>(&_default_machine_key_);
  machine_private_key_ = const_cast< ::std::string*>(&_default_machine_private_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeConfig::~NodeConfig() {
  SharedDtor();
}

void NodeConfig::SharedDtor() {
  if (machine_key_ != &_default_machine_key_) {
    delete machine_key_;
  }
  if (machine_private_key_ != &_default_machine_private_key_) {
    delete machine_private_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NodeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeConfig_descriptor_;
}

const NodeConfig& NodeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_5fconfig_2eproto();  return *default_instance_;
}

NodeConfig* NodeConfig::default_instance_ = NULL;

NodeConfig* NodeConfig::New() const {
  return new NodeConfig;
}

void NodeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (machine_key_ != &_default_machine_key_) {
        machine_key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (machine_private_key_ != &_default_machine_private_key_) {
        machine_private_key_->clear();
      }
    }
  }
  principles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machine_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_machine_key()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->machine_key().data(), this->machine_key().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_machine_private_key;
        break;
      }
      
      // required string machine_private_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_machine_private_key:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_machine_private_key()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->machine_private_key().data(), this->machine_private_key().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_principles;
        break;
      }
      
      // repeated .larpc.PrincipleDescriptor principles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_principles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_principles()));
        if (input->ExpectTag(26)) goto parse_principles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NodeConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string machine_key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_key().data(), this->machine_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machine_key(), output);
  }
  
  // required string machine_private_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_private_key().data(), this->machine_private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machine_private_key(), output);
  }
  
  // repeated .larpc.PrincipleDescriptor principles = 3;
  for (int i = 0; i < this->principles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->principles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string machine_key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_key().data(), this->machine_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine_key(), target);
  }
  
  // required string machine_private_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_private_key().data(), this->machine_private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_private_key(), target);
  }
  
  // repeated .larpc.PrincipleDescriptor principles = 3;
  for (int i = 0; i < this->principles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->principles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machine_key = 1;
    if (has_machine_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_key());
    }
    
    // required string machine_private_key = 2;
    if (has_machine_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_private_key());
    }
    
  }
  // repeated .larpc.PrincipleDescriptor principles = 3;
  total_size += 1 * this->principles_size();
  for (int i = 0; i < this->principles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->principles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeConfig::MergeFrom(const NodeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  principles_.MergeFrom(from.principles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_machine_key(from.machine_key());
    }
    if (from._has_bit(1)) {
      set_machine_private_key(from.machine_private_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConfig::CopyFrom(const NodeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < principles_size(); i++) {
    if (!this->principles(i).IsInitialized()) return false;
  }
  return true;
}

void NodeConfig::Swap(NodeConfig* other) {
  if (other != this) {
    std::swap(machine_key_, other->machine_key_);
    std::swap(machine_private_key_, other->machine_private_key_);
    principles_.Swap(&other->principles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeConfig_descriptor_;
  metadata.reflection = NodeConfig_reflection_;
  return metadata;
}


}  // namespace test
}  // namespace larpc
